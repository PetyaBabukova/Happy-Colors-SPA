import { useAuth } from '@/context/AuthContext';


export const onRegisterSubmit = async (
  formValues,
  setSuccess,
  setError,
  setInvalidFields,
  setUser
) => {
  try {
    const res = await fetch('http://localhost:3030/users/register', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(formValues),
    });

    const result = await res.json();

    if (!res.ok) {
      throw result;
    }

    setError('');
    setInvalidFields([]);

    await onLoginSubmit(
      { email: formValues.email, password: formValues.password },
      () => {},
      () => {},
      setUser
    );

    // ‚úÖ –°–µ–≥–∞ –≤–µ—á–µ –≤—Å–∏—á–∫–æ –µ –≥–æ—Ç–æ–≤–æ ‚Äì –ª–æ–≥–≤–∞–º–µ, —Ç–æ–≥–∞–≤–∞ success
    setSuccess(true);

  } catch (err) {
    setSuccess(false);
    setError(err.message || '–í—ä–∑–Ω–∏–∫–Ω–∞ –≥—Ä–µ—à–∫–∞.');
    if (err.field) {
      setInvalidFields([err.field]);
    } else {
      setInvalidFields([]);
    }
  }
};


  export const onLoginSubmit = async (formValues, setSuccess, setError, setUser) => {
    try {
      const res = await fetch('http://localhost:3030/users/login', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        credentials: 'include',
        body: JSON.stringify(formValues),
      });
  
      const result = await res.json();
  
      if (!res.ok) {
        throw new Error(result.message);
      }
  
      // üî• –¥–∏—Ä–µ–∫—Ç–Ω–æ —Å–µ—Ç–≤–∞—à user
      if (typeof setUser === 'function') {
        setUser({
          username: result.username,
          _id: result._id,
          email: result.email
        });
      }
  
      setSuccess(true);
      setError('');
    } catch (err) {
      console.error('Login error:', err.message);
      setSuccess(false);
      setError('–ù–µ–≤–∞–ª–∏–¥–µ–Ω e-mail –∏–ª–∏ –ø–∞—Ä–æ–ª–∞');
    }
  };
  
    export const logoutUser = async (setUser, router, setError = () => {}) => {
    try {
      const res = await fetch('http://localhost:3030/users/logout', {
        method: 'POST',
        credentials: 'include',
      });
  
      if (!res.ok) {
        throw new Error('–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∏–∑—Ö–æ–¥');
      }
  
      if (typeof setUser === 'function') {
        setUser(null); // üßπ –∏–∑—á–∏—Å—Ç–≤–∞–º–µ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è –æ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
      }
  
      router.push('/'); // üîÅ –ø—Ä–µ–Ω–∞—Å–æ—á–≤–∞–º–µ –∫—ä–º –Ω–∞—á–∞–ª–Ω–∞—Ç–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞
    } catch (err) {
      console.error('Logout error:', err.message);
      setError('–ù–µ—É—Å–ø–µ—à–µ–Ω –∏–∑—Ö–æ–¥');
    }
  };
  

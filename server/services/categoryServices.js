import Category from '../models/Category.js';
import Product from '../models/Product.js';
import { slugify } from '../utils/slugify.js';

// üëâ –°—ä–∑–¥–∞–≤–∞–Ω–µ –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è —Å—ä—Å slug
export async function createCategory(data) {
  const slug = slugify(data.name);
  const category = new Category({ ...data, slug });
  return await category.save();
}

// üëâ –í—Ä—ä—â–∞ –≤—Å–∏—á–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–∑–∞ create/edit —Ñ–æ—Ä–º–∏)
export async function getAllCategories() {
  return await Category.find().lean();
}

// üëâ –í—Ä—ä—â–∞ —Å–∞–º–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏—Ç–µ, –∫–æ–∏—Ç–æ –∏–º–∞—Ç –ø–æ–Ω–µ 1 –ø—Ä–æ–¥—É–∫—Ç (–∑–∞ —Ö–µ–¥—ä—Ä/shop)
export async function getVisibleCategories() {
  const categories = await Category.find().lean();

  const visibleCategories = [];

  for (const category of categories) {
    const productCount = await Product.countDocuments({ category: category._id });
    if (productCount > 0) {
      visibleCategories.push(category);
    }
  }

  return visibleCategories;
}

export async function deleteCategory(categoryId) {
  const categoryToDelete = await Category.findById(categoryId);

  if (!categoryToDelete) {
    throw new Error('–ö–∞—Ç–µ–≥–æ—Ä–∏—è—Ç–∞ –Ω–µ —Å—ä—â–µ—Å—Ç–≤—É–≤–∞.');
  }

  // –ë—Ä–æ–π –ø—Ä–æ–¥—É–∫—Ç–∏, –∫–æ–∏—Ç–æ –∏–∑–ø–æ–ª–∑–≤–∞—Ç —Ç–∞–∑–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è
  const productCount = await Product.countDocuments({ category: categoryId });

  if (productCount === 0) {
    // –ù—è–º–∞ –ø—Ä–æ–¥—É–∫—Ç–∏ ‚Üí –¥–∏—Ä–µ–∫—Ç–Ω–æ –∏–∑—Ç—Ä–∏–≤–∞–º–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ç–∞
    await Category.findByIdAndDelete(categoryId);
    return { message: '–ö–∞—Ç–µ–≥–æ—Ä–∏—è—Ç–∞ –±–µ—à–µ –∏–∑—Ç—Ä–∏—Ç–∞ —É—Å–ø–µ—à–Ω–æ.', reassigned: false };
  }

  // –ò–º–∞ –ø—Ä–æ–¥—É–∫—Ç–∏ ‚Üí –Ω–∞–º–∏—Ä–∞–º–µ/—Å—ä–∑–¥–∞–≤–∞–º–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—è "–î—Ä—É–≥–∏"
  let fallbackCategory = await Category.findOne({ name: '–î—Ä—É–≥–∏' });

  if (!fallbackCategory) {
    fallbackCategory = new Category({
      name: '–î—Ä—É–≥–∏',
      slug: slugify('–î—Ä—É–≥–∏'),
    });
    await fallbackCategory.save();
  }

  // –ü—Ä–µ—Ö–≤—ä—Ä–ª—è–º–µ –ø—Ä–æ–¥—É–∫—Ç–∏—Ç–µ –∫—ä–º –∫–∞—Ç–µ–≥–æ—Ä–∏—è "–î—Ä—É–≥–∏"
  await Product.updateMany(
    { category: categoryId },
    { category: fallbackCategory._id }
  );

  // –ò–∑—Ç—Ä–∏–≤–∞–º–µ –æ—Ä–∏–≥–∏–Ω–∞–ª–Ω–∞—Ç–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è
  await Category.findByIdAndDelete(categoryId);

  return {
    message: `–ö–∞—Ç–µ–≥–æ—Ä–∏—è—Ç–∞ –±–µ—à–µ –∏–∑—Ç—Ä–∏—Ç–∞. –ü—Ä–æ–¥—É–∫—Ç–∏—Ç–µ –±—è—Ö–∞ –ø—Ä–µ—Ö–≤—ä—Ä–ª–µ–Ω–∏ –∫—ä–º –∫–∞—Ç–µ–≥–æ—Ä–∏—è "${fallbackCategory.name}".`,
    reassigned: true,
  };
}

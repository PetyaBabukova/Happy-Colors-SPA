import express from 'express';
import {
  createCategory,
  getAllCategories,
  getVisibleCategories,
  deleteCategory, 
  getCategoryById,
  updateCategory 
} from '../services/categoryServices.js';

const router = express.Router();

// üü¢ –í—Å–∏—á–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–∑–∞ create/edit —Ñ–æ—Ä–º–∏)
router.get('/', async (req, res) => {
  try {
    const categories = await getAllCategories();
    res.json(categories);
  } catch (err) {
    res.status(500).json({ message: '–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∑–∞—Ä–µ–∂–¥–∞–Ω–µ –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏—Ç–µ.' });
  }
});

// üü¢ –°–∞–º–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å –ø—Ä–æ–¥—É–∫—Ç–∏ (–∑–∞ —Ö–µ–¥—ä—Ä–∞ –∏ shop —Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ç–∞)
router.get('/visible', async (req, res) => {
  try {
    const visibleCategories = await getVisibleCategories();
    res.json(visibleCategories);
  } catch (err) {
    res.status(500).json({ message: '–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∑–∞—Ä–µ–∂–¥–∞–Ω–µ –Ω–∞ –≤–∏–¥–∏–º–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.' });
  }
});

// üü¢ –°—ä–∑–¥–∞–≤–∞–Ω–µ –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è
router.post('/', async (req, res) => {
  try {
    const created = await createCategory(req.body);
    res.status(201).json(created);
  } catch (err) {
    let message = err.message;

    if (err.name === 'ValidationError') {
      const first = Object.values(err.errors)[0];
      message = first?.message || '–ù–µ–≤–∞–ª–∏–¥–µ–Ω –≤—Ö–æ–¥';
    }

    res.status(400).json({ message });
  }
});

router.delete('/:id', async (req, res) => {
  try {
    const result = await deleteCategory(req.params.id);
    res.status(200).json(result);
  } catch (err) {
    res.status(400).json({ message: err.message || '–ù–µ—É—Å–ø–µ—à–Ω–æ –∏–∑—Ç—Ä–∏–≤–∞–Ω–µ –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è.' });
  }
});

router.get('/:categoryId', async (req, res) => {
  try {
    const category = await getCategoryById(req.params.categoryId);

    if (!category) {
      return res.status(404).json({ message: '–ö–∞—Ç–µ–≥–æ—Ä–∏—è—Ç–∞ –Ω–µ –±–µ—à–µ –Ω–∞–º–µ—Ä–µ–Ω–∞.' });
    }

    res.json(category);
  } catch (err) {
    console.error('–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∑–∞—Ä–µ–∂–¥–∞–Ω–µ –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ç–∞:', err);
    res.status(500).json({ message: '–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∑–∞—Ä–µ–∂–¥–∞–Ω–µ –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ç–∞.' });
  }
});

router.put('/:categoryId', async (req, res) => {
  try {
    const updated = await updateCategory(req.params.categoryId, req.body);

    if (!updated) {
      return res.status(404).json({ message: '–ö–∞—Ç–µ–≥–æ—Ä–∏—è—Ç–∞ –Ω–µ –±–µ—à–µ –Ω–∞–º–µ—Ä–µ–Ω–∞.' });
    }

    res.json(updated);
  } catch (err) {
    let message = err.message;

    if (err.name === 'ValidationError') {
      const first = Object.values(err.errors)[0];
      message = first?.message || '–ù–µ–≤–∞–ª–∏–¥–Ω–∏ –¥–∞–Ω–Ω–∏.';
    }

    res.status(400).json({ message });
  }
});


export default router;
